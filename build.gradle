// Gradle plugins setup
plugins {
	id 'java-library'
	id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    
}

// Sets up some stuff for the export
version = "${minecraft_version}-${mod_version}"
group = group_name
archivesBaseName = mod_name

// Sets the version of java
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

// Sets up stuff for minecraft
minecraft {

	// Mappings channel
	mappings channel: project.mapping_channel, version: project.mapping_version
	
	// Location of the access transformer
	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
	
	// Run Configurations
	runs {
	
		// Everything set here will apply to all of the other run configurations
		configureEach {
			workingDirectory project.file('run')
			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'
			mods {
                "${modid}" {
                    source sourceSets.main
             	}
        	}
		}
	
		// Sets up the client run configuration
		client {
			property 'forge.enabledGameTestNamespaces', project.modid
			args '--username', "mudkipboy7", '--uuid', "a9886315-d13c-40ea-8ccd-e3cbb6c9978d"
		}
	
		// Sets up the server run configuration
		server {
			property 'forge.enabledGameTestNamespaces', project.modid
			args '--nogui'	
		}
	
		// Sets up the data generation run configuration
		data {
			// Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
		 	args '--mod', project.modid, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
	 	}	
	}
}

// Include resources generated by data generators in the build.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Repositories for dependencies
repositories {
	// Repository for Just Enough Items
	maven {
    	name "Jared's maven"
    	url 'https://maven.blamejared.com/'
    }
}

// Sets dependencies
dependencies {
	// Forge
	minecraft "net.minecraftforge:forge:${minecraft_version}-${modloader_version}"
	
	// Just Enough Items
  	compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
  	compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
  	runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))
  	
  	// Mixin
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
    
    // Java Libraries
    minecraftLibrary "com.fasterxml.jackson.core:jackson-core:${jackson_core_version}"
    minecraftLibrary "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jackson_yaml_version}"
    
    
}

// Does stuff with mixin (thing that let you ovveride vaniila classes)
mixin {
	// The reference map file
	add sourceSets.main, "${modid}.refmap.json"
	// The config file
	config "${modid}.mixins.json"
}

// Sets up the jar file manifest
jar {
    manifest {
        attributes([
                "Specification-Title"     : modid,
                "Specification-Vendor"    : author,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Sets up the compiling.
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

	
	


